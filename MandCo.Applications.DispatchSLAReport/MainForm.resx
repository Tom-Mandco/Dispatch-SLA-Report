<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gQD+/fwA9/LrAKx3NQDu4tQA697OAOnayAC7h0YA5tbCAOHPtwDAmWYA3carAPz59gDv5toA+fXxAPXu
        5QDy6d8AtoNDAL6UYADYv6AA1LiWALmHSgC8kVwAw5RZAOTSvADfyrAAyaV4ANa8mwCuejoAsH0+ALSA
        PgC0gkQAuoZEALSFSAC2h0wAvYtLALiJTgC3ilAAu49ZAL+WYQDBmmgAw5xsAMSfcADGonUA0bOPAMqn
        fQDLqoEAza6GAPbw6gCygEEAtYNGAOHOtQC5jFQA0rWRAPr38gC1hUoAt4dMAP7+/gD9/PsA/Pr4APv4
        9QD17ucA9O3kAPDn2wCxfj8A7eHSAOvf0ACzgUUAtINFAOvdzQC4h0kAvIhIAOjZxgC6iEsA5dXBAL6T
        XwDAl2UA3MaqAMSdbQDFoHEA2L6fAMqofgDTt5QA+vbxAPn07wD17+YA9O7mAPTs4wCteDcA8+vhAPLq
        4ACvezsAsHw9AK99PQDv5dgAsX9BAO7j1QCxgEIAs4FCALWCQQCygkQAs4JGALqFQwC3hEUA6dzKALWE
        RwC0g0gAtIRJALaFSQDn18QAtYZLALaHTQC3iE4At4lPAL6LTAC9i0wA49G8ALiKUgC4jFMAuoxTAODN
        tQDeya8AvJJcAL2SXgDdyK0A3cesAL6VYQC+lmIA28SnANm/oQDDnGoA1r2cAMSebwDVu5oA1bqZAMah
        dADUuZcAx6N1AMileQDIpnoA0bWRAMqmegDJp3wA///+AP7//gD//v4A/v79AP79/QD+/fsA/fz8AP38
        +gD9+/oA/Pv5APz7+AD8+fcA+/j0APr38wD59fAA+PTvAPfy7AD38esA9vHqAPbw6QCteTcA9e/oAK16
        OAD17+cArno5APXu5gCuezoA9O3lAK98OwCvezwAsHw8AK98PQCwfT0Ar30+APHo3QCwfj4AsX4+ALB+
        PwCxfz8AsX5AALF/QADv5NgAsH9BALSAPwCxgEEAsoBCAO3i1AC1gUEAsoBDALGBQwDs4dIAs4FDALKB
        RACzgUQA7N/QALOCRADr388As4JFAOvezwCfDEtLS0tLSzT08FQsnXxLS0tLS0s0mfRHfEtLS0t/qGgt
        oqKiomh2brhQwyutdlWioqKf61oOhF1nmKKioi5/HKlXV1f5+in/0QEBzJS3W+1X/vEp93LL1yAH6ldX
        okscqVdX/lcgAQEBb80BAQH7QPXxa28BATcBAeeBlVeiSxypV1dTSQEB3LtghGU7AQGICw4jAXgxXhTQ
        AT75HKJLHKlX7IKJAe6wMOVTMKQig23qtgHcsdmSUoYBbEDtokscqRzqUQHMF98cV1dXefGbNRwfAYBS
        V1cwugEBGOGiSxypHBwIASUTNVdXV1dXHBwcm6MBEuIcV5FgAQGHMKJLHKkcHE4BEpubV1dXV1dXVxyV
        hgFEvTndlSAB1EjxokscqRwcTgEFWPlXV1dXV1ccV5VI1gEJJ2ImAQGzFp+iSxypHOonAdBfkVdXV1eb
        7fUcV+oy1QEBAQEBJhP5V6JLHKlX6l4PAR+s3+2V5OyIhnocn+oeQSFEO2tX8ldXokscqVcc74MBAfNk
        gkhhIAEBSpVXV+31py8u6v6hV1eiSxypV1f5pU4BAQHU18gBAXQV9ldXVxya+f6fV1dXV6JLHKlXV1c1
        VyhDAQEBAYpPB+pXV1dXV1dXV1dXV1dXokscqRz+/lf+U6y9KQqHtJXs/hxXVxyX7DUcVxz+/hyiSxyp
        Vy6iV1dXl5Xy6uqVHFcupFf1m4K/TBzo9S6kp6JLHAKF2pBeFvlqOt6IUxz8tt4//i8+bDfTH2O83NhR
        aHwcAoQBATIwk8QBAf3+NaR7AWnlrgEByQEBAQEBThN6Sxw9XJABuermrwEBDw7dG9wBKKTgAWmBvxAB
        AXIV5aJLHBptOwEg6quQAQEBSo60yAEVE40BKAYejwEBAZBqVUscqd9pAZaVMQEk5wH77cQB0l6RTgFz
        KUYBlijgSfqfSxyp41EB1RyyAf+Hxs9MKAGML5OCZgEBASFA20xY/qJLHKntxMXQwHUBJxyLASiyAQXy
        HOoO3gEBT98cl/5XokscqfJdzsyAcnAO3REBPPcBaZccdrU4AQFCGOhXV1eiSxyp/BOMAXABd6XdFcc3
        yAG+7Zv4aQF7IAHVB5dXV6JLHKn+bZ4BAQEDMPVqkAEBARXq+qaPARQc0gEp4ldXokscqRw1EQEBcbrq
        V+QgAQFxguv+LjoB4Dw3bxXlV1eiSxypHOSIAQFDoZtX7MEBAeBcl5+VMdIBAQGqVxxXV6JLHKlXkjFx
        yiftHFc1akU3fi7+V5/tuiIgwlv5V1dXokscKqkaHQ02TRqpqVmoBBkzWVmpqVlWPX2cfaipqaktDACp
        HFf+5DA1VxwcoBzpMOwcoBwcHBybmxwcHBwcHFdLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAA=
</value>
  </data>
</root>